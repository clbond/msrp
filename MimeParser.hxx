#ifndef MSRP_MIMEPARSER_HXX
#define MSRP_MIMEPARSER_HXX

#include <boost/mem_fn.hpp>

#include <boost/spirit.hpp>
#include <boost/spirit/actor.hpp>
#include <boost/spirit/attribute/closure.hpp>
#include <boost/spirit/phoenix.hpp>

#include "msrp/Mime.hxx"

namespace msrp
{

namespace parser
{

struct MimeClosure : boost::spirit::closure<MimeClosure, msrp::Mime>
{
   member1 mime;
};

struct Mime : boost::spirit::grammar<Mime, MimeClosure::context_t>
{
   template<typename ScannerT>
   struct definition
   {
      template<typename Actor, typename T>
         inline boost::spirit::ref_value_actor<T, Actor>
      assign_property(T& ref)
      {
         return boost::spirit::ref_value_actor<T, Actor>(ref);
      }

      template<bool PrimaryType>
      struct type_actor
      {
         template<typename T, typename Iterator>
         inline void act(T& ref, Iterator const& first, Iterator const& last) const
         {
            if (PrimaryType)
            {
               ref().type().assign(first, last);
            }
            else
            {
               ref().subtype().assign(first, last);
            }
         }
      };

      typedef std::map<std::string, std::string> ParamMap;

      definition(const Mime& self)
      {
         using phoenix::bind;

         root = type[assign_property<type_actor<true> >(self.mime)]
            >> '/'
            >> type[assign_property<type_actor<false> >(self.mime)]
            >> *param;

         type = +boost::spirit::alnum_p | boost::spirit::ch_p('*');

         param = boost::spirit::ch_p(';')
            >> (+boost::spirit::alnum_p)
                  [phoenix::var(key) =
                   phoenix::construct_<std::string>(phoenix::arg1, phoenix::arg2)]
            >> '='
            >> ((boost::spirit::ch_p('"')
                  >> (*(boost::spirit::anychar_p - boost::spirit::ch_p('"')))
                       [boost::spirit::insert_at_a(
                          bind(boost::mem_fn<ParamMap&>(&msrp::Mime::params))(self.mime)(), key)]
                  >> boost::spirit::ch_p('"'))
               |
                (*(boost::spirit::anychar_p
                       - boost::spirit::blank_p
                       - boost::spirit::ch_p(';')))
                  [boost::spirit::insert_at_a(
                     bind(boost::mem_fn<ParamMap&>(&msrp::Mime::params))(self.mime)(), key)]
               )
            ;
      }

      std::string key;

      boost::spirit::rule<ScannerT> root;
      boost::spirit::rule<ScannerT> type;
      boost::spirit::rule<ScannerT> param;

      boost::spirit::rule<ScannerT> const& start() const
      {
         return root;
      }
   };
};

} // namespace parser

}

#endif

// Copyright (c) 2006, 2007 Chris L. Bond.
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
